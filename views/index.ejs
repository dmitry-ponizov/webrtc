<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" text="text/css" href="styles.css">
    <script src="/socket.io/socket.io.js"></script>
</head>

<body>
    <video id="myVideoTag" autoplay></video>
    <video id="theirVideoTag" autoplay></video>
    <div>
        <label>Your name</label>
        <input id="myName" type="text" />
        <label>Message</label>
        <input id="myMessage" type="text" />
        <input id="sendMessage" type="submit" />
        <div id="chatArea"> Message output: </br></div>
        <div id="signalingArea"> Signaling messages: </br> </div>
    </div>
    <script>

        var videoArea = document.querySelector("#myVideoTag");
        var theirVideoArea = document.querySelector('#theirVideoTag')
        var videoSelect = document.querySelector('#camera')
        var profilePicCanvas = document.querySelector('#profilePicCanvas')
        var profilePictureOutput = document.querySelector('#profilePictureOutput')
        var takeProfilePicture = document.querySelector('#takeProfilePicture')
        var videoTag = document.querySelector('#myVideoTag')
        var myName = document.querySelector('#myName')
        var myMessage = document.querySelector('#myMessage')
        var sendMessage = document.querySelector('#sendMessage')
        var charArea = document.querySelector('#chatArea')
        var signalingArea = document.querySelector('#signalingArea')
        var ROOM = "chat"
        var SIGNAL_ROOM = 'signal_room'

        var configuration = {
            'iceServers': [
                {
                    'url': 'stun:stun.l.google.com:19302'
                }
            ]
        }

        var rtcPeerConn;


        io = io.connect();
        io.emit('ready', { "chat_room": ROOM, 'signal_room': SIGNAL_ROOM })

        io.emit('signal', { "type": 'user_here', "message": "Are you ready for a call?", room: SIGNAL_ROOM })

        io.on('announce', function (data) {
            displayMessage(data.message)
        })

        io.on('message', function (data) {
            displayMessage(data.author + ": " + data.message)
        })

        io.on('signaling_message', function (data) {
            displaySignalingMessage("Signal received: " + data.type)

            // Setup the RTC Peer Connection object
            if (!rtcPeerConn)
                startSignaling()
            if (data.type != 'user_here') {
                var message = JSON.parse(data.message);
                if (message.sdp) {

                    rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp), function () {
                        // if we recieved an offer, we need to answer
                        if (rtcPeerConn.remoteDescription.type == 'offer') {
                            rtcPeerConn.createAnswer(sendLocalDesc, logError);
                        }
                    }, logError);
                }
                else {
                    if (message.candidate) {
                        rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate));
                    }

                }
            }
        })

        function startSignaling() {
            displaySignalingMessage("starting signaling...")
            rtcPeerConn = new webkitRTCPeerConnection(configuration)

            // send any ice candidates to the other peer
            rtcPeerConn.onicecandidate = function (evt) {
                if (evt.candidate) {
                    io.emit('signal', {
                        "type": "ice candidate", "message": JSON.stringify({
                            'candidate': evt.candidate
                        }), "room": SIGNAL_ROOM
                    })
                    displaySignalingMessage("competed the ice candidate...")
                }
            }

            // let the 'negotiationneeded' event trigger offer generation
            rtcPeerConn.onnegotiationneeded = function () {
                console.log(" on negotiation called");
                rtcPeerConn.createOffer(sendLocalDesc, logError);
            };


            // once remote stream arrives, show it in the main video element
            rtcPeerConn.onaddstream = function (evt) {
                console.log("going to add their stream");
                theirVideoArea.srcObject = evt.stream
            };


            // get a local stream, show it in our video tag and add it to be sent
            navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
            navigator.getUserMedia({
                'audio': false,
                'video': true
            }, function (stream) {
                console.log("going to display my stream...");
                videoArea.srcObject = stream;
                rtcPeerConn.addStream(stream);
            }, logError);


        }


        function sendLocalDesc(desc) {
            rtcPeerConn.setLocalDescription(desc, function () {
                console.log("sending local description");
                io.emit('signal', { "type": "SDP", "message": JSON.stringify({ 'sdp': rtcPeerConn.localDescription }), "room": SIGNAL_ROOM });
            }, logError);
        }


        function logError(error) {
            displaySignalingMessage(error.name + ': ' + error.message)
        }


        sendMessage.addEventListener('click', function (ev) {
            io.emit('send', { "author": myName.value, "message": myMessage.value, "room": ROOM })
            ev.preventDefault()
        }, false)

        function displayMessage(message) {
            charArea.innerHTML = charArea.innerHTML + "</br>" + message
        }


        function displaySignalingMessage(message) {
            signalingArea.innerHTML = signalingArea.innerHTML + "</br>" + message
        }


    </script>
</body>

</html>